1. Herança
    1.1. Criando a classe ItemCardapio
        In this study, the instructors (Laís and Guilherme) create three classes: ItemCardapio, Prato, and Bebida. They
        define the initialization method for ItemCardapio but only specify initial parameters for Prato and Bebida. The
        teachers note that both Prato and Bebida have identical properties to ItemCardapio, which leads to the next
        topic's focus on inheritance.

    1.2. Herança
        Guilherme explains that to makePratoa child ofItemCardapio, it’s needed to include the parent class name in pa-
        rentheses. Within the child's__init__function, use super().__init__(var1, var2) to initialize the parent class
        variables. However, any unique properties of the child class should be initialized separately.

    1.3. Acessando os itens do cardápio
        With both classes ready for use, Laís imports them into the app class and creates instances: watermelon juice
        using the Bebida class, and bread using the Prato class. Guilherme suggests improving the output by defining a
        new printing method. He edits the native __str__ method inside Bebida, replacing the console output with the
        object's name.

2. Polirnorfisrno e método abstrato
    2.1. Métodos para adicionar itens
        To begin this module, Laís suggests that the program is ready to receive a menu, built inside restaurante.py and
        so she creates a variable named self._cardapio inside class Restaurante constructor. With that, she also creates
        two functions (adicionar_bebida_no_cardapio and adicionar_prato_no_cardapio), but doesn't import any classes.

    2.2. Refatoração
        Laís points out that the code is too repetitive, and then Guilherme also notes that, thinking on a application
        evolving overtime, a menu should have also desserts and promotions, for example, and so a function for each item
        wouldn't be convenient. With that in mind, the teachers create a new function named adicionar_no_cardapio to
        replace adicionar_bebida_no_cardapio and adicionar_prato_no_cardapio, using the pyhon's native function
        isinstance to verify if an added item is an instance of itemCardapio. After that, Laís import the ItemCardapio
        class to restaurante.py, instancing two items from Cardapio in app.py.

    2.3. Exibindo o cardápio
        The teachers create a new function inside restaurante, named exibir_cardapio. This funcion uses the method
        hasattr to verify if a inserted item is has an attribute from class Bebida or Prato and prints it accordingly in
        the console. This function is accessed in app.py.